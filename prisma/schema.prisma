generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                   String                @id @default(uuid())
  name                 String
  email                String                @unique
  phone                String                @unique
  country              String
  bio                  String?
  creator              Boolean               @default(false)
  premium              Boolean               @default(false)
  isVerified           Boolean               @default(false)
  password             String
  profileImage         String?
  Tokens               Tokens[]
  PlanData             PlanData[]
  Preferences          Preferences[]
  Audio                Audio[]
  liveTalks            LiveTalk[]
  liveTalkParticipants LiveTalkParticipant[]
  following            Follower[]
  playlists            Playlist[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  TotalCounts          TotalCounts[]
}

model Tokens {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  verificationToken String?
  refreshToken      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model PlanData {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  paymentStatus Boolean  @default(false)
  method        String   @default("card")
  amount        Int      @default(0)
  currency      String
  category      String
  type          String
  expiryDate    DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Preferences {
  id        String   @id @default(uuid())
  languages String[]
  genres    String[]
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Audio {
  id         String     @id @default(uuid())
  title      String
  coverImage String
  category   String
  genres     String[]
  parts      Json[]
  streams    Int        @default(0)
  playlists  Playlist[] @relation("PlaylistAudio")
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model TotalCounts {
  id            String   @id @default(uuid())
  totalStreams  Int      @default(0)
  totalRevenue  Int      @default(0)
  monthlyIncome String[]
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model LiveTalk {
  id           String                @id @default(uuid())
  status       Boolean               @default(false)
  title        String
  roomId       String                @unique
  genres       String[]
  record       Boolean               @default(false)
  views        Int                   @default(0)
  userId       String
  user         User                  @relation(fields: [userId], references: [id])
  participants LiveTalkParticipant[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model LiveTalkParticipant {
  id         String  @id @default(uuid())
  liveTalkId String
  userId     String
  isHost     Boolean @default(false)
  peerId     String?
  roomId     String?

  liveTalk    LiveTalk @relation(fields: [liveTalkId], references: [id])
  participant User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follower {
  id         String   @id @default(uuid())
  userId     String
  followedId String[]
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Playlist {
  id        String   @id @default(uuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  audios    Audio[]  @relation("PlaylistAudio")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
